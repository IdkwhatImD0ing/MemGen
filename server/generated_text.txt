Start Project 1
MakeMeLunch is a web application that aims to help users keep track of their kitchen ingredients and provide them with recipes that use those ingredients. The application allows users to create an account to store a list of ingredients in a database unique to each user. The stored list of ingredients is used to provide users with relevant food recipes. The project was built using Next.js, JavaScript, Material UI, Spoonacular API, Firebase Authentication, Firebase Firestore Realtime Database, Vercel, and Axios. 

To build the application, the developers learned about JavaScript scripting, HTML and CSS formatting through React, and API calls through Axios. They faced several challenges, such as learning Next.js in one day with no prior knowledge of js, html, and react, incorporating Firebase and Spoonacular API into the project, and dealing with troubles with fast refresh, which required the developers to reboot the app to see changes. 

The developers successfully implemented Firebase Auth and linking authentication with Firestore Realtime Database. They also allowed data transfer between two completely different APIs, sent and received Spoonacular API calls through Axios, and managed to implement the backend and frontend within one day. The developers plan to implement filters for recipe search, such as calories, options to display healthier substitutes for certain recipe ingredients, clean up code, and further modularization in the form of components to simplify the code. However, they have acknowledged security flaws in database rules, which require attention.
End Project 1

Start Project 2
SlugLoop is a real-time tracking application that provides accurate and up-to-date information on loop bus locations and routes at the University of California, Santa Cruz (UCSC). The app helps students make informed decisions about their transportation, relieving pressure on metro buses during peak hours. The project uses GPS emitting hardware on loop buses, installed by the school for tracking purposes. The raw data is processed in ExpressJS and stored on a Firebase database. The frontend UI is built with React and Node.js, displaying bus location data on a map, and is mobile-friendly.

The SlugLoop project faced several challenges, including obtaining data from relay stations on campus, functionality issues with some GPS stations, gaining access to servers through communication with UCSC staff, data transfer from receivers to server using LibCurl library and C, technical issues with hosting services, and limited data availability from loop buses due to restricted operating hours on weekends. Despite these challenges, the team accomplished their goals, which included providing accurate and up-to-date information on loop bus locations, enabling UCSC students to make informed decisions about their transportation, and relieving pressure on metro buses during peak hours.

The SlugLoop project required technical and programming skills such as integrating multiple frameworks to deliver a functional and convenient product, designing and blueprinting applications before writing code, assigning roles based on team members' strengths for efficient development, and creating a simple, user-friendly interface. The team also learned the importance of upgrading or replacing existing hardware to fill coverage gaps, installing required hardware on all loop buses to ensure comprehensive tracking, obtaining official school sponsorship, and collecting data to train a machine learning model for estimating bus arrival times at given stops.
End Project 2

Start Project 3
The Sink Or Swim (SOS) project, which won the NorCal Spring Hack 2023 competition, aims to predict a passenger's likelihood of survival on the Titanic by generating stories about their experience using machine learning and language generation technology. The team used Next.js 13 as its web development platform and trained a custom recurrent neural network model on Kaggle's Titanic dataset, which includes data about passengers' ages, genders, and socio-economic class. The challenge was to balance the accuracy of the model with its computational efficiency when dealing with multiple users' requests. The team cleaned and preprocessed the dataset, integrated the model with OpenAI's language generation technology, and addressed security concerns.

To build this project, the team used various technologies, including TensorFlow, PyTorch, Flask, NumPy, and Keras, and employed Framer Motion for animation and TailwindCSS for styling. They learned how to use Next.js 13 to create a user-friendly web app and the significance of data cleaning and preprocessing to train accurate machine learning models. Consequently, they ran into design issues, such as managing user data and handling large numbers of requests efficiently. They also faced programming challenges, such as limiting Axios to one post request per refresh and integrating their machine learning model with their web development platform and language generation technology. 

The SOS project demonstrates the technical and programming capabilities of its contributors (@IdkwhatImD0ing, @simon-quach, and @triquenguyen) in web development, language generation, data cleaning, and machine learning. Their use of cutting-edge technologies and their ability to balance computational efficiency with accuracy in their machine learning model is noteworthy. They also showed a keen understanding of security and scalability issues in web development.
End Project 3

